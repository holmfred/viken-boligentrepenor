{"ast":null,"code":"/* import { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport * as yup from \"yup\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport axios from \"axios\";\r\nimport FormError from \"../common/FormError\";\r\nimport { BASE_URL, TOKEN_PATH } from \"../../constants/api\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport  AuthContext  from \"../../context/AuthContext\"\r\nimport { useContext } from \"react\";\r\n\r\n\r\nconst url = BASE_URL + TOKEN_PATH;\r\n\r\nconst schema = yup.object().shape({\r\n\tusername: yup.string().required(\"Please enter your username\"),\r\n\tpassword: yup.string().required(\"Please enter your password\"),\r\n});\r\n\r\nexport default function LoginForm() {\r\n\tconst [submitting, setSubmitting] = useState(false);\r\n\tconst [loginError, setLoginError] = useState(null);\r\n\r\n\tconst navigate = useNavigate()\r\n\r\n\tconst {\r\n\t\tregister,\r\n\t\thandleSubmit,\r\n\t\tformState: { errors },\r\n\t  } = useForm({\r\n\t\tresolver: yupResolver(schema),\r\n\t  });\r\n\r\n\tconst [auth, setAuth] = useContext(AuthContext);\r\n\r\n\tasync function onSubmit(data) {\r\n\t\tsetSubmitting(true);\r\n\t\tsetLoginError(null);\r\n\r\n\t\tconsole.log(data);\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await axios.post(url, data);\r\n\t\t\tconsole.log(\"response\", response.data);\r\n\t\t\tsetAuth(response.data)\r\n\t\t\tnavigate(\"/admin\")\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"error\", error);\r\n\t\t\tsetLoginError(error.toString());\r\n\t\t} finally {\r\n\t\t\tsetSubmitting(false);\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<form onSubmit={handleSubmit(onSubmit)}>\r\n\t\t\t\t{loginError && <FormError>{loginError}</FormError>}\r\n\t\t\t\t<fieldset disabled={submitting}>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<p>Username</p>\r\n\t\t\t\t\t\t<input {...register(\"username\", { required: true })} />\r\n\t\t\t\t\t\t{errors.username && <FormError>{errors.username.message}</FormError>}\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<p>Password</p>\r\n\t\t\t\t\t\t<input type=\"password\" {...register(\"password\", { required: true })} />\r\n\t\t\t\t\t\t{errors.password && <FormError>{errors.password.message}</FormError>}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<button>{submitting ? \"Loggin in...\" : \"Login\"}</button>\r\n\t\t\t\t</fieldset>\r\n\t\t\t</form>\r\n\t\t</>\r\n\t);\r\n} */","map":{"version":3,"names":[],"sources":["C:/Users/fredr/OneDrive/Documents/GitHub/viken_boligentrepenor_v2/src/components/login/LoginForm.jsx"],"sourcesContent":["/* import { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport * as yup from \"yup\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport axios from \"axios\";\r\nimport FormError from \"../common/FormError\";\r\nimport { BASE_URL, TOKEN_PATH } from \"../../constants/api\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport  AuthContext  from \"../../context/AuthContext\"\r\nimport { useContext } from \"react\";\r\n\r\n\r\nconst url = BASE_URL + TOKEN_PATH;\r\n\r\nconst schema = yup.object().shape({\r\n\tusername: yup.string().required(\"Please enter your username\"),\r\n\tpassword: yup.string().required(\"Please enter your password\"),\r\n});\r\n\r\nexport default function LoginForm() {\r\n\tconst [submitting, setSubmitting] = useState(false);\r\n\tconst [loginError, setLoginError] = useState(null);\r\n\r\n\tconst navigate = useNavigate()\r\n\r\n\tconst {\r\n\t\tregister,\r\n\t\thandleSubmit,\r\n\t\tformState: { errors },\r\n\t  } = useForm({\r\n\t\tresolver: yupResolver(schema),\r\n\t  });\r\n\r\n\tconst [auth, setAuth] = useContext(AuthContext);\r\n\r\n\tasync function onSubmit(data) {\r\n\t\tsetSubmitting(true);\r\n\t\tsetLoginError(null);\r\n\r\n\t\tconsole.log(data);\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await axios.post(url, data);\r\n\t\t\tconsole.log(\"response\", response.data);\r\n\t\t\tsetAuth(response.data)\r\n\t\t\tnavigate(\"/admin\")\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"error\", error);\r\n\t\t\tsetLoginError(error.toString());\r\n\t\t} finally {\r\n\t\t\tsetSubmitting(false);\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<form onSubmit={handleSubmit(onSubmit)}>\r\n\t\t\t\t{loginError && <FormError>{loginError}</FormError>}\r\n\t\t\t\t<fieldset disabled={submitting}>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<p>Username</p>\r\n\t\t\t\t\t\t<input {...register(\"username\", { required: true })} />\r\n\t\t\t\t\t\t{errors.username && <FormError>{errors.username.message}</FormError>}\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<p>Password</p>\r\n\t\t\t\t\t\t<input type=\"password\" {...register(\"password\", { required: true })} />\r\n\t\t\t\t\t\t{errors.password && <FormError>{errors.password.message}</FormError>}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<button>{submitting ? \"Loggin in...\" : \"Login\"}</button>\r\n\t\t\t\t</fieldset>\r\n\t\t\t</form>\r\n\t\t</>\r\n\t);\r\n} */"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}