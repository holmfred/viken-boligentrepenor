{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nexport default function useLocalStorage(key, initialValue) {\n  _s();\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  }); // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\n_s(useLocalStorage, \"stsRKh+lx2dnc/BUF49sRjo7S4M=\");","map":{"version":3,"names":["useState","useLocalStorage","key","initialValue","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","log","setValue","value","valueToStore","Function","setItem","stringify"],"sources":["C:/Users/fredr/OneDrive/Documents/GitHub/viken_boligentrepenor_v2/src/hooks/useLocalStorage.jsx"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n\t// State to store our value\r\n\t// Pass initial state function to useState so logic is only executed once\r\n\tconst [storedValue, setStoredValue] = useState(() => {\r\n\t\ttry {\r\n\t\t\t// Get from local storage by key\r\n\t\t\tconst item = window.localStorage.getItem(key);\r\n\r\n\t\t\t// Parse stored json or if none return initialValue\r\n\t\t\treturn item ? JSON.parse(item) : initialValue;\r\n\t\t} catch (error) {\r\n\t\t\t// If error also return initialValue\r\n\t\t\tconsole.log(error);\r\n\t\t\treturn initialValue;\r\n\t\t}\r\n\t});\r\n\r\n\t// Return a wrapped version of useState's setter function that ...\r\n\t// ... persists the new value to localStorage.\r\n\tconst setValue = (value) => {\r\n\t\ttry {\r\n\t\t\t// Allow value to be a function so we have same API as useState\r\n\t\t\tconst valueToStore = value instanceof Function ? value(storedValue) : value;\r\n\r\n\t\t\t// Save state\r\n\t\t\tsetStoredValue(valueToStore);\r\n\r\n\t\t\t// Save to local storage\r\n\t\t\twindow.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n\t\t} catch (error) {\r\n\t\t\t// A more advanced implementation would handle the error case\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\r\n\treturn [storedValue, setValue];\r\n}"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,eAAe,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,YAA9B,EAA4C;EAAA;;EAC1D;EACA;EACA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,MAAM;IACpD,IAAI;MACH;MACA,MAAMM,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BP,GAA5B,CAAb,CAFG,CAIH;;MACA,OAAOI,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBH,YAAjC;IACA,CAND,CAME,OAAOS,KAAP,EAAc;MACf;MACAC,OAAO,CAACC,GAAR,CAAYF,KAAZ;MACA,OAAOT,YAAP;IACA;EACD,CAZ6C,CAA9C,CAH0D,CAiB1D;EACA;;EACA,MAAMY,QAAQ,GAAIC,KAAD,IAAW;IAC3B,IAAI;MACH;MACA,MAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACZ,WAAD,CAAjC,GAAiDY,KAAtE,CAFG,CAIH;;MACAX,cAAc,CAACY,YAAD,CAAd,CALG,CAOH;;MACAV,MAAM,CAACC,YAAP,CAAoBW,OAApB,CAA4BjB,GAA5B,EAAiCQ,IAAI,CAACU,SAAL,CAAeH,YAAf,CAAjC;IACA,CATD,CASE,OAAOL,KAAP,EAAc;MACf;MACAC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACA;EACD,CAdD;;EAgBA,OAAO,CAACR,WAAD,EAAcW,QAAd,CAAP;AACA;;GApCuBd,e"},"metadata":{},"sourceType":"module"}